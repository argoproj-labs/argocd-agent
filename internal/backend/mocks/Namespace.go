// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Namespace is an autogenerated mock type for the Namespace type
type Namespace struct {
	mock.Mock
}

type Namespace_Expecter struct {
	mock *mock.Mock
}

func (_m *Namespace) EXPECT() *Namespace_Expecter {
	return &Namespace_Expecter{mock: &_m.Mock}
}

// EnsureSynced provides a mock function with given fields: duration
func (_m *Namespace) EnsureSynced(duration time.Duration) error {
	ret := _m.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for EnsureSynced")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Namespace_EnsureSynced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureSynced'
type Namespace_EnsureSynced_Call struct {
	*mock.Call
}

// EnsureSynced is a helper method to define mock.On call
//   - duration time.Duration
func (_e *Namespace_Expecter) EnsureSynced(duration interface{}) *Namespace_EnsureSynced_Call {
	return &Namespace_EnsureSynced_Call{Call: _e.mock.On("EnsureSynced", duration)}
}

func (_c *Namespace_EnsureSynced_Call) Run(run func(duration time.Duration)) *Namespace_EnsureSynced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *Namespace_EnsureSynced_Call) Return(_a0 error) *Namespace_EnsureSynced_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Namespace_EnsureSynced_Call) RunAndReturn(run func(time.Duration) error) *Namespace_EnsureSynced_Call {
	_c.Call.Return(run)
	return _c
}

// StartInformer provides a mock function with given fields: ctx
func (_m *Namespace) StartInformer(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartInformer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Namespace_StartInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartInformer'
type Namespace_StartInformer_Call struct {
	*mock.Call
}

// StartInformer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Namespace_Expecter) StartInformer(ctx interface{}) *Namespace_StartInformer_Call {
	return &Namespace_StartInformer_Call{Call: _e.mock.On("StartInformer", ctx)}
}

func (_c *Namespace_StartInformer_Call) Run(run func(ctx context.Context)) *Namespace_StartInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Namespace_StartInformer_Call) Return(_a0 error) *Namespace_StartInformer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Namespace_StartInformer_Call) RunAndReturn(run func(context.Context) error) *Namespace_StartInformer_Call {
	_c.Call.Return(run)
	return _c
}

// NewNamespace creates a new instance of Namespace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamespace(t interface {
	mock.TestingT
	Cleanup(func())
}) *Namespace {
	mock := &Namespace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
