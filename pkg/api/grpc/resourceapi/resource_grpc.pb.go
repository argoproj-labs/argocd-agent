// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: resource.proto

package resourceapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	Request(ctx context.Context, opts ...grpc.CallOption) (Resource_RequestClient, error)
	Submit(ctx context.Context, in *ResourceResponse, opts ...grpc.CallOption) (*SubmitResponse, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Request(ctx context.Context, opts ...grpc.CallOption) (Resource_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resource_ServiceDesc.Streams[0], "/resourceapi.Resource/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceRequestClient{stream}
	return x, nil
}

type Resource_RequestClient interface {
	Send(*ResourceRequest) error
	Recv() (*ResourceResponse, error)
	grpc.ClientStream
}

type resourceRequestClient struct {
	grpc.ClientStream
}

func (x *resourceRequestClient) Send(m *ResourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceRequestClient) Recv() (*ResourceResponse, error) {
	m := new(ResourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceClient) Submit(ctx context.Context, in *ResourceResponse, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/resourceapi.Resource/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	Request(Resource_RequestServer) error
	Submit(context.Context, *ResourceResponse) (*SubmitResponse, error)
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) Request(Resource_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedResourceServer) Submit(context.Context, *ResourceResponse) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceServer).Request(&resourceRequestServer{stream})
}

type Resource_RequestServer interface {
	Send(*ResourceResponse) error
	Recv() (*ResourceRequest, error)
	grpc.ServerStream
}

type resourceRequestServer struct {
	grpc.ServerStream
}

func (x *resourceRequestServer) Send(m *ResourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceRequestServer) Recv() (*ResourceRequest, error) {
	m := new(ResourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Resource_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceapi.Resource/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Submit(ctx, req.(*ResourceResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourceapi.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Resource_Submit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Request",
			Handler:       _Resource_Request_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resource.proto",
}
