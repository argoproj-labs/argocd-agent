// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: logstream.proto

package logstreamapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamServiceClient is the client API for LogStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamServiceClient interface {
	// Agent establishes a client-streaming RPC and sends log data to principal
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogStreamService_StreamLogsClient, error)
}

type logStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamServiceClient(cc grpc.ClientConnInterface) LogStreamServiceClient {
	return &logStreamServiceClient{cc}
}

func (c *logStreamServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogStreamService_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStreamService_ServiceDesc.Streams[0], "/logstreamapi.LogStreamService/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamServiceStreamLogsClient{stream}
	return x, nil
}

type LogStreamService_StreamLogsClient interface {
	Send(*LogStreamData) error
	CloseAndRecv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type logStreamServiceStreamLogsClient struct {
	grpc.ClientStream
}

func (x *logStreamServiceStreamLogsClient) Send(m *LogStreamData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logStreamServiceStreamLogsClient) CloseAndRecv() (*LogStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamServiceServer is the server API for LogStreamService service.
// All implementations must embed UnimplementedLogStreamServiceServer
// for forward compatibility
type LogStreamServiceServer interface {
	// Agent establishes a client-streaming RPC and sends log data to principal
	StreamLogs(LogStreamService_StreamLogsServer) error
	mustEmbedUnimplementedLogStreamServiceServer()
}

// UnimplementedLogStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamServiceServer struct {
}

func (UnimplementedLogStreamServiceServer) StreamLogs(LogStreamService_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamServiceServer) mustEmbedUnimplementedLogStreamServiceServer() {}

// UnsafeLogStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServiceServer will
// result in compilation errors.
type UnsafeLogStreamServiceServer interface {
	mustEmbedUnimplementedLogStreamServiceServer()
}

func RegisterLogStreamServiceServer(s grpc.ServiceRegistrar, srv LogStreamServiceServer) {
	s.RegisterService(&LogStreamService_ServiceDesc, srv)
}

func _LogStreamService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamServiceServer).StreamLogs(&logStreamServiceStreamLogsServer{stream})
}

type LogStreamService_StreamLogsServer interface {
	SendAndClose(*LogStreamResponse) error
	Recv() (*LogStreamData, error)
	grpc.ServerStream
}

type logStreamServiceStreamLogsServer struct {
	grpc.ServerStream
}

func (x *logStreamServiceStreamLogsServer) SendAndClose(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logStreamServiceStreamLogsServer) Recv() (*LogStreamData, error) {
	m := new(LogStreamData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamService_ServiceDesc is the grpc.ServiceDesc for LogStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstreamapi.LogStreamService",
	HandlerType: (*LogStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStreamService_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logstream.proto",
}
